
ARM_F407_usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004fc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006d4  080006d4  000106dc  2**0
                  CONTENTS
  4 .ARM          00000000  080006d4  080006d4  000106dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006d4  080006dc  000106dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d4  080006d4  000106d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d8  080006d8  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000106dc  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000106dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c52  00000000  00000000  0001070c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000272  00000000  00000000  0001135e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000115d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  00011698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018211  00000000  00000000  00011738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c89  00000000  00000000  00029949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088664  00000000  00000000  0002a5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b2c36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000200  00000000  00000000  000b2c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800068c 	.word	0x0800068c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800068c 	.word	0x0800068c

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4907      	ldr	r1, [pc, #28]	; (8000220 <__NVIC_EnableIRQ+0x38>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100

08000224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	db0a      	blt.n	800024e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2da      	uxtb	r2, r3
 800023c:	490c      	ldr	r1, [pc, #48]	; (8000270 <__NVIC_SetPriority+0x4c>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	0112      	lsls	r2, r2, #4
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	440b      	add	r3, r1
 8000248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800024c:	e00a      	b.n	8000264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4908      	ldr	r1, [pc, #32]	; (8000274 <__NVIC_SetPriority+0x50>)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3b04      	subs	r3, #4
 800025c:	0112      	lsls	r2, r2, #4
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	440b      	add	r3, r1
 8000262:	761a      	strb	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	e000e100 	.word	0xe000e100
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3b01      	subs	r3, #1
 8000284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000288:	d301      	bcc.n	800028e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800028a:	2301      	movs	r3, #1
 800028c:	e00f      	b.n	80002ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <SysTick_Config+0x40>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3b01      	subs	r3, #1
 8000294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000296:	210f      	movs	r1, #15
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f7ff ffc2 	bl	8000224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SysTick_Config+0x40>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <SysTick_Config+0x40>)
 80002a8:	2207      	movs	r2, #7
 80002aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002ac:	2300      	movs	r3, #0
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	e000e010 	.word	0xe000e010

080002bc <delayMs>:

extern uint32_t systemTimeCounter;


void delayMs(uint32_t delay)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	uint32_t curr = systemTimeCounter;
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <delayMs+0x2c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	60fb      	str	r3, [r7, #12]
	while(systemTimeCounter - curr < delay)
 80002ca:	bf00      	nop
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <delayMs+0x2c>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d8f8      	bhi.n	80002cc <delayMs+0x10>
	{	}
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	2000001c 	.word	0x2000001c

080002ec <main>:



int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0
	// PWR AND SYS ENABLE
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002f2:	4b91      	ldr	r3, [pc, #580]	; (8000538 <main+0x24c>)
 80002f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002f6:	4a90      	ldr	r2, [pc, #576]	; (8000538 <main+0x24c>)
 80002f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002fc:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002fe:	4b8e      	ldr	r3, [pc, #568]	; (8000538 <main+0x24c>)
 8000300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000302:	4a8d      	ldr	r2, [pc, #564]	; (8000538 <main+0x24c>)
 8000304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000308:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CSR |= PWR_CSR_VOSRDY;
 800030a:	4b8c      	ldr	r3, [pc, #560]	; (800053c <main+0x250>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	4a8b      	ldr	r2, [pc, #556]	; (800053c <main+0x250>)
 8000310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000314:	6053      	str	r3, [r2, #4]

	SysTick_Config(16000000/1000);
 8000316:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800031a:	f7ff ffad 	bl	8000278 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn,0);
 800031e:	2100      	movs	r1, #0
 8000320:	f04f 30ff 	mov.w	r0, #4294967295
 8000324:	f7ff ff7e 	bl	8000224 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SysTick_IRQn);
 8000328:	f04f 30ff 	mov.w	r0, #4294967295
 800032c:	f7ff ff5c 	bl	80001e8 <__NVIC_EnableIRQ>

	// switches
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000330:	4b81      	ldr	r3, [pc, #516]	; (8000538 <main+0x24c>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a80      	ldr	r2, [pc, #512]	; (8000538 <main+0x24c>)
 8000336:	f043 0310 	orr.w	r3, r3, #16
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOE->MODER &= ~((3 << GPIO_MODER_MODE7_Pos)|(3 << GPIO_MODER_MODE8_Pos));
 800033c:	4b80      	ldr	r3, [pc, #512]	; (8000540 <main+0x254>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a7f      	ldr	r2, [pc, #508]	; (8000540 <main+0x254>)
 8000342:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 8000346:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~((3 << GPIO_MODER_MODE9_Pos)|(3 << GPIO_MODER_MODE10_Pos));
 8000348:	4b7d      	ldr	r3, [pc, #500]	; (8000540 <main+0x254>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a7c      	ldr	r2, [pc, #496]	; (8000540 <main+0x254>)
 800034e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000352:	6013      	str	r3, [r2, #0]

	//LEDs
	//RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOEEN;
	GPIOE->MODER &= ~((3 << GPIO_MODER_MODE11_Pos)|(3 << GPIO_MODER_MODE12_Pos));
 8000354:	4b7a      	ldr	r3, [pc, #488]	; (8000540 <main+0x254>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a79      	ldr	r2, [pc, #484]	; (8000540 <main+0x254>)
 800035a:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
 800035e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~((3 << GPIO_MODER_MODE13_Pos)|(3 << GPIO_MODER_MODE14_Pos));
 8000360:	4b77      	ldr	r3, [pc, #476]	; (8000540 <main+0x254>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a76      	ldr	r2, [pc, #472]	; (8000540 <main+0x254>)
 8000366:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
 800036a:	6013      	str	r3, [r2, #0]

	GPIOE->MODER |= ((1 << GPIO_MODER_MODE11_Pos)|(1 << GPIO_MODER_MODE12_Pos));
 800036c:	4b74      	ldr	r3, [pc, #464]	; (8000540 <main+0x254>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a73      	ldr	r2, [pc, #460]	; (8000540 <main+0x254>)
 8000372:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= ((1 << GPIO_MODER_MODE13_Pos)|(1 << GPIO_MODER_MODE14_Pos));
 8000378:	4b71      	ldr	r3, [pc, #452]	; (8000540 <main+0x254>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a70      	ldr	r2, [pc, #448]	; (8000540 <main+0x254>)
 800037e:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 8000382:	6013      	str	r3, [r2, #0]

	// USART
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000384:	4b6c      	ldr	r3, [pc, #432]	; (8000538 <main+0x24c>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a6b      	ldr	r2, [pc, #428]	; (8000538 <main+0x24c>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~((3 << GPIO_MODER_MODE2_Pos)| (3 <<GPIO_MODER_MODE3_Pos ));
 8000390:	4b6c      	ldr	r3, [pc, #432]	; (8000544 <main+0x258>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a6b      	ldr	r2, [pc, #428]	; (8000544 <main+0x258>)
 8000396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800039a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << GPIO_MODER_MODE2_Pos)| (2 <<GPIO_MODER_MODE3_Pos );
 800039c:	4b69      	ldr	r3, [pc, #420]	; (8000544 <main+0x258>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a68      	ldr	r2, [pc, #416]	; (8000544 <main+0x258>)
 80003a2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80003a6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |=  GPIO_OSPEEDER_OSPEEDR2 | GPIO_OSPEEDER_OSPEEDR3;
 80003a8:	4b66      	ldr	r3, [pc, #408]	; (8000544 <main+0x258>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	4a65      	ldr	r2, [pc, #404]	; (8000544 <main+0x258>)
 80003ae:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80003b2:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos) | (7 << GPIO_AFRL_AFSEL3_Pos);
 80003b4:	4b63      	ldr	r3, [pc, #396]	; (8000544 <main+0x258>)
 80003b6:	6a1b      	ldr	r3, [r3, #32]
 80003b8:	4a62      	ldr	r2, [pc, #392]	; (8000544 <main+0x258>)
 80003ba:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80003be:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80003c0:	4b5d      	ldr	r3, [pc, #372]	; (8000538 <main+0x24c>)
 80003c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c4:	4a5c      	ldr	r2, [pc, #368]	; (8000538 <main+0x24c>)
 80003c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ca:	6413      	str	r3, [r2, #64]	; 0x40

	USART2->CR1 &= ~(USART_CR1_M); // 8 бит
 80003cc:	4b5e      	ldr	r3, [pc, #376]	; (8000548 <main+0x25c>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	4a5d      	ldr	r2, [pc, #372]	; (8000548 <main+0x25c>)
 80003d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003d6:	60d3      	str	r3, [r2, #12]
	//USART->CR1 |= USART_CR1_OVER8;
	USART2->BRR |= 0X342; // baud rate register
 80003d8:	4b5b      	ldr	r3, [pc, #364]	; (8000548 <main+0x25c>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	4a5a      	ldr	r2, [pc, #360]	; (8000548 <main+0x25c>)
 80003de:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 80003e2:	f043 0302 	orr.w	r3, r3, #2
 80003e6:	6093      	str	r3, [r2, #8]
	USART2->CR2 &= ~(USART_CR2_STOP); // стоп бит
 80003e8:	4b57      	ldr	r3, [pc, #348]	; (8000548 <main+0x25c>)
 80003ea:	691b      	ldr	r3, [r3, #16]
 80003ec:	4a56      	ldr	r2, [pc, #344]	; (8000548 <main+0x25c>)
 80003ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003f2:	6113      	str	r3, [r2, #16]
	USART2->CR1 |= USART_CR1_UE; // периферия
 80003f4:	4b54      	ldr	r3, [pc, #336]	; (8000548 <main+0x25c>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4a53      	ldr	r2, [pc, #332]	; (8000548 <main+0x25c>)
 80003fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003fe:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE; // receive transmit
 8000400:	4b51      	ldr	r3, [pc, #324]	; (8000548 <main+0x25c>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	4a50      	ldr	r2, [pc, #320]	; (8000548 <main+0x25c>)
 8000406:	f043 030c 	orr.w	r3, r3, #12
 800040a:	60d3      	str	r3, [r2, #12]

	char str[] = "Eternity";
 800040c:	4a4f      	ldr	r2, [pc, #316]	; (800054c <main+0x260>)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	ca07      	ldmia	r2, {r0, r1, r2}
 8000412:	c303      	stmia	r3!, {r0, r1}
 8000414:	701a      	strb	r2, [r3, #0]

	//while(!(USART2->SR & USART_SR_RXNE));
	//str[2] = USART2->DR;
	for(int i =0; str[i];i++)
 8000416:	2300      	movs	r3, #0
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
 800041a:	e00f      	b.n	800043c <main+0x150>
	{
		while(!(USART2->SR & USART_SR_TXE));
 800041c:	bf00      	nop
 800041e:	4b4a      	ldr	r3, [pc, #296]	; (8000548 <main+0x25c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f9      	beq.n	800041e <main+0x132>
		USART2->DR = str[i];
 800042a:	1d3a      	adds	r2, r7, #4
 800042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800042e:	4413      	add	r3, r2
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	4b45      	ldr	r3, [pc, #276]	; (8000548 <main+0x25c>)
 8000434:	605a      	str	r2, [r3, #4]
	for(int i =0; str[i];i++)
 8000436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000438:	3301      	adds	r3, #1
 800043a:	627b      	str	r3, [r7, #36]	; 0x24
 800043c:	1d3a      	adds	r2, r7, #4
 800043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000440:	4413      	add	r3, r2
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1e9      	bne.n	800041c <main+0x130>
	}

	uint8_t mode = 2;
 8000448:	2302      	movs	r3, #2
 800044a:	73fb      	strb	r3, [r7, #15]
	uint32_t symbol = ' ';
 800044c:	2320      	movs	r3, #32
 800044e:	623b      	str	r3, [r7, #32]
	uint32_t flag = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
	while (1)
	{

		if(mode == 1) {
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d112      	bne.n	8000480 <main+0x194>
			if(USART2->SR & USART_SR_RXNE) {
 800045a:	4b3b      	ldr	r3, [pc, #236]	; (8000548 <main+0x25c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f003 0320 	and.w	r3, r3, #32
 8000462:	2b00      	cmp	r3, #0
 8000464:	d00c      	beq.n	8000480 <main+0x194>
				symbol = USART2->DR;
 8000466:	4b38      	ldr	r3, [pc, #224]	; (8000548 <main+0x25c>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	623b      	str	r3, [r7, #32]
				while(!(USART2->SR & USART_SR_TXE));
 800046c:	bf00      	nop
 800046e:	4b36      	ldr	r3, [pc, #216]	; (8000548 <main+0x25c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f9      	beq.n	800046e <main+0x182>
				USART2->DR = symbol;
 800047a:	4a33      	ldr	r2, [pc, #204]	; (8000548 <main+0x25c>)
 800047c:	6a3b      	ldr	r3, [r7, #32]
 800047e:	6053      	str	r3, [r2, #4]
			}
		}

		if(mode == 2) {
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	2b02      	cmp	r3, #2
 8000484:	d117      	bne.n	80004b6 <main+0x1ca>
			if(USART2->SR & USART_SR_RXNE) {
 8000486:	4b30      	ldr	r3, [pc, #192]	; (8000548 <main+0x25c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f003 0320 	and.w	r3, r3, #32
 800048e:	2b00      	cmp	r3, #0
 8000490:	d004      	beq.n	800049c <main+0x1b0>
				symbol = USART2->DR;
 8000492:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <main+0x25c>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	623b      	str	r3, [r7, #32]
				flag = 1;
 8000498:	2301      	movs	r3, #1
 800049a:	61fb      	str	r3, [r7, #28]
			}
			if(flag) {
 800049c:	69fb      	ldr	r3, [r7, #28]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d009      	beq.n	80004b6 <main+0x1ca>
				while(!(USART2->SR & USART_SR_TXE));
 80004a2:	bf00      	nop
 80004a4:	4b28      	ldr	r3, [pc, #160]	; (8000548 <main+0x25c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f9      	beq.n	80004a4 <main+0x1b8>
				USART2->DR = symbol;
 80004b0:	4a25      	ldr	r2, [pc, #148]	; (8000548 <main+0x25c>)
 80004b2:	6a3b      	ldr	r3, [r7, #32]
 80004b4:	6053      	str	r3, [r2, #4]
			}
		}

		if(mode == 3) {
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	d137      	bne.n	800052c <main+0x240>
			const char *response;
			if(USART2->SR & USART_SR_RXNE) {
 80004bc:	4b22      	ldr	r3, [pc, #136]	; (8000548 <main+0x25c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f003 0320 	and.w	r3, r3, #32
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d031      	beq.n	800052c <main+0x240>
				symbol = USART2->DR;
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <main+0x25c>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	623b      	str	r3, [r7, #32]
				switch(symbol) {
 80004ce:	6a3b      	ldr	r3, [r7, #32]
 80004d0:	2b6f      	cmp	r3, #111	; 0x6f
 80004d2:	d00f      	beq.n	80004f4 <main+0x208>
 80004d4:	6a3b      	ldr	r3, [r7, #32]
 80004d6:	2b6f      	cmp	r3, #111	; 0x6f
 80004d8:	d80f      	bhi.n	80004fa <main+0x20e>
 80004da:	6a3b      	ldr	r3, [r7, #32]
 80004dc:	2b66      	cmp	r3, #102	; 0x66
 80004de:	d003      	beq.n	80004e8 <main+0x1fc>
 80004e0:	6a3b      	ldr	r3, [r7, #32]
 80004e2:	2b69      	cmp	r3, #105	; 0x69
 80004e4:	d003      	beq.n	80004ee <main+0x202>
 80004e6:	e008      	b.n	80004fa <main+0x20e>
				case 'f':
					response = "Putin";
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <main+0x264>)
 80004ea:	61bb      	str	r3, [r7, #24]
					break;
 80004ec:	e005      	b.n	80004fa <main+0x20e>
				case 'i':
					response = "Vladimir";
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <main+0x268>)
 80004f0:	61bb      	str	r3, [r7, #24]
					break;
 80004f2:	e002      	b.n	80004fa <main+0x20e>
				case 'o':
					response = "Vladimirovich";
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <main+0x26c>)
 80004f6:	61bb      	str	r3, [r7, #24]
					break;
 80004f8:	bf00      	nop
				}
				for(int i =0; response[i];i++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	e00f      	b.n	8000520 <main+0x234>
				{
					while(!(USART2->SR & USART_SR_TXE));
 8000500:	bf00      	nop
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <main+0x25c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <main+0x216>
					USART2->DR = response[i];
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	69ba      	ldr	r2, [r7, #24]
 8000512:	4413      	add	r3, r2
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <main+0x25c>)
 8000518:	605a      	str	r2, [r3, #4]
				for(int i =0; response[i];i++)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	69ba      	ldr	r2, [r7, #24]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1e9      	bne.n	8000500 <main+0x214>
				}
			}
		}

		if(mode == 4) {
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d124      	bne.n	800057c <main+0x290>
			for(int i = 0; i <= 127; ++i) {
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	e01e      	b.n	8000576 <main+0x28a>
 8000538:	40023800 	.word	0x40023800
 800053c:	40007000 	.word	0x40007000
 8000540:	40021000 	.word	0x40021000
 8000544:	40020000 	.word	0x40020000
 8000548:	40004400 	.word	0x40004400
 800054c:	080006c8 	.word	0x080006c8
 8000550:	080006a4 	.word	0x080006a4
 8000554:	080006ac 	.word	0x080006ac
 8000558:	080006b8 	.word	0x080006b8
				while(!(USART2->SR & USART_SR_TXE));
 800055c:	bf00      	nop
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <main+0x29c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <main+0x272>
				USART2->DR = i;
 800056a:	4a07      	ldr	r2, [pc, #28]	; (8000588 <main+0x29c>)
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	6053      	str	r3, [r2, #4]
			for(int i = 0; i <= 127; ++i) {
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	3301      	adds	r3, #1
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	2b7f      	cmp	r3, #127	; 0x7f
 800057a:	ddef      	ble.n	800055c <main+0x270>
			}
		}

		delayMs(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f7ff fe9c 	bl	80002bc <delayMs>
		if(mode == 1) {
 8000584:	e766      	b.n	8000454 <main+0x168>
 8000586:	bf00      	nop
 8000588:	40004400 	.word	0x40004400

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
uint32_t systemTimeCounter = 0;

void SysTick_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	systemTimeCounter++;
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <SysTick_Handler+0x18>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	4a03      	ldr	r2, [pc, #12]	; (80005ec <SysTick_Handler+0x18>)
 80005e0:	6013      	str	r3, [r2, #0]

}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	2000001c 	.word	0x2000001c

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061e:	f000 f811 	bl	8000644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fe63 	bl	80002ec <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   r0, =_estack
 8000628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000634:	080006dc 	.word	0x080006dc
  ldr r2, =_sbss
 8000638:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800063c:	20000020 	.word	0x20000020

08000640 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC_IRQHandler>
	...

08000644 <__libc_init_array>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	4d0d      	ldr	r5, [pc, #52]	; (800067c <__libc_init_array+0x38>)
 8000648:	4c0d      	ldr	r4, [pc, #52]	; (8000680 <__libc_init_array+0x3c>)
 800064a:	1b64      	subs	r4, r4, r5
 800064c:	10a4      	asrs	r4, r4, #2
 800064e:	2600      	movs	r6, #0
 8000650:	42a6      	cmp	r6, r4
 8000652:	d109      	bne.n	8000668 <__libc_init_array+0x24>
 8000654:	4d0b      	ldr	r5, [pc, #44]	; (8000684 <__libc_init_array+0x40>)
 8000656:	4c0c      	ldr	r4, [pc, #48]	; (8000688 <__libc_init_array+0x44>)
 8000658:	f000 f818 	bl	800068c <_init>
 800065c:	1b64      	subs	r4, r4, r5
 800065e:	10a4      	asrs	r4, r4, #2
 8000660:	2600      	movs	r6, #0
 8000662:	42a6      	cmp	r6, r4
 8000664:	d105      	bne.n	8000672 <__libc_init_array+0x2e>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f855 3b04 	ldr.w	r3, [r5], #4
 800066c:	4798      	blx	r3
 800066e:	3601      	adds	r6, #1
 8000670:	e7ee      	b.n	8000650 <__libc_init_array+0xc>
 8000672:	f855 3b04 	ldr.w	r3, [r5], #4
 8000676:	4798      	blx	r3
 8000678:	3601      	adds	r6, #1
 800067a:	e7f2      	b.n	8000662 <__libc_init_array+0x1e>
 800067c:	080006d4 	.word	0x080006d4
 8000680:	080006d4 	.word	0x080006d4
 8000684:	080006d4 	.word	0x080006d4
 8000688:	080006d8 	.word	0x080006d8

0800068c <_init>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	bf00      	nop
 8000690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000692:	bc08      	pop	{r3}
 8000694:	469e      	mov	lr, r3
 8000696:	4770      	bx	lr

08000698 <_fini>:
 8000698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069a:	bf00      	nop
 800069c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069e:	bc08      	pop	{r3}
 80006a0:	469e      	mov	lr, r3
 80006a2:	4770      	bx	lr
