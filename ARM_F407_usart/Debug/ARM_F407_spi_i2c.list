
ARM_F407_spi_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005b8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000760  08000768  00010768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000760  08000760  00010768  2**0
                  CONTENTS
  4 .ARM          00000000  08000760  08000760  00010768  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000760  08000768  00010768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000760  08000760  00010760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000764  08000764  00010764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010768  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010768  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d8e  00000000  00000000  00010798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000028a  00000000  00000000  00011526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  000117b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c8  00000000  00000000  00011888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018211  00000000  00000000  00011950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d05  00000000  00000000  00029b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000886b6  00000000  00000000  0002a866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b2f1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000250  00000000  00000000  000b2f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000748 	.word	0x08000748

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000748 	.word	0x08000748

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4907      	ldr	r1, [pc, #28]	; (8000220 <__NVIC_EnableIRQ+0x38>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100

08000224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	db0a      	blt.n	800024e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2da      	uxtb	r2, r3
 800023c:	490c      	ldr	r1, [pc, #48]	; (8000270 <__NVIC_SetPriority+0x4c>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	0112      	lsls	r2, r2, #4
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	440b      	add	r3, r1
 8000248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800024c:	e00a      	b.n	8000264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4908      	ldr	r1, [pc, #32]	; (8000274 <__NVIC_SetPriority+0x50>)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3b04      	subs	r3, #4
 800025c:	0112      	lsls	r2, r2, #4
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	440b      	add	r3, r1
 8000262:	761a      	strb	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	e000e100 	.word	0xe000e100
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3b01      	subs	r3, #1
 8000284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000288:	d301      	bcc.n	800028e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800028a:	2301      	movs	r3, #1
 800028c:	e00f      	b.n	80002ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <SysTick_Config+0x40>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3b01      	subs	r3, #1
 8000294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000296:	210f      	movs	r1, #15
 8000298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800029c:	f7ff ffc2 	bl	8000224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SysTick_Config+0x40>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <SysTick_Config+0x40>)
 80002a8:	2207      	movs	r2, #7
 80002aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002ac:	2300      	movs	r3, #0
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	e000e010 	.word	0xe000e010

080002bc <delayMs>:

extern uint32_t systemTimeCounter;


void delayMs(uint32_t delay)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	uint32_t curr = systemTimeCounter;
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <delayMs+0x2c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	60fb      	str	r3, [r7, #12]
	while(systemTimeCounter - curr < delay)
 80002ca:	bf00      	nop
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <delayMs+0x2c>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d8f8      	bhi.n	80002cc <delayMs+0x10>
	{	}
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	2000001c 	.word	0x2000001c

080002ec <spiTransmitRecieve>:
	}
	I2C1->CR1 |= I2C_CR1_STOP;
}

void spiTransmitRecieve(uint8_t *td,uint8_t *rc,uint8_t tn, uint8_t rn)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b089      	sub	sp, #36	; 0x24
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	4611      	mov	r1, r2
 80002f8:	461a      	mov	r2, r3
 80002fa:	460b      	mov	r3, r1
 80002fc:	71fb      	strb	r3, [r7, #7]
 80002fe:	4613      	mov	r3, r2
 8000300:	71bb      	strb	r3, [r7, #6]
		GPIOA->ODR &= ~GPIO_ODR_ODR_4;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <spiTransmitRecieve+0xd0>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a2d      	ldr	r2, [pc, #180]	; (80003bc <spiTransmitRecieve+0xd0>)
 8000308:	f023 0310 	bic.w	r3, r3, #16
 800030c:	6153      	str	r3, [r2, #20]
		uint8_t dummy;
		for(int i =0; i <tn;i++)
 800030e:	2300      	movs	r3, #0
 8000310:	61bb      	str	r3, [r7, #24]
 8000312:	e019      	b.n	8000348 <spiTransmitRecieve+0x5c>
		{
			while(!(SPI1->SR & SPI_SR_TXE));
 8000314:	bf00      	nop
 8000316:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <spiTransmitRecieve+0xd4>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <spiTransmitRecieve+0x2a>
			SPI1->DR = td[i];
 8000322:	69bb      	ldr	r3, [r7, #24]
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	4413      	add	r3, r2
 8000328:	781a      	ldrb	r2, [r3, #0]
 800032a:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <spiTransmitRecieve+0xd4>)
 800032c:	60da      	str	r2, [r3, #12]
			while(!(SPI1->SR & SPI_SR_RXNE));
 800032e:	bf00      	nop
 8000330:	4b23      	ldr	r3, [pc, #140]	; (80003c0 <spiTransmitRecieve+0xd4>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	d0f9      	beq.n	8000330 <spiTransmitRecieve+0x44>
			dummy = SPI1->DR;
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <spiTransmitRecieve+0xd4>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	77fb      	strb	r3, [r7, #31]
		for(int i =0; i <tn;i++)
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	3301      	adds	r3, #1
 8000346:	61bb      	str	r3, [r7, #24]
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	69ba      	ldr	r2, [r7, #24]
 800034c:	429a      	cmp	r2, r3
 800034e:	dbe1      	blt.n	8000314 <spiTransmitRecieve+0x28>
		}
		while((SPI1->SR & SPI_SR_BSY));
 8000350:	bf00      	nop
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <spiTransmitRecieve+0xd4>)
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f9      	bne.n	8000352 <spiTransmitRecieve+0x66>
			for(int i =0; i <rn;i++)
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
 8000362:	e01a      	b.n	800039a <spiTransmitRecieve+0xae>
		{
			while(!(SPI1->SR & SPI_SR_TXE));
 8000364:	bf00      	nop
 8000366:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <spiTransmitRecieve+0xd4>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	f003 0302 	and.w	r3, r3, #2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <spiTransmitRecieve+0x7a>
			SPI1->DR = dummy;
 8000372:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <spiTransmitRecieve+0xd4>)
 8000374:	7ffb      	ldrb	r3, [r7, #31]
 8000376:	60d3      	str	r3, [r2, #12]
			while(!(SPI1->SR & SPI_SR_RXNE));
 8000378:	bf00      	nop
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <spiTransmitRecieve+0xd4>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	2b00      	cmp	r3, #0
 8000384:	d0f9      	beq.n	800037a <spiTransmitRecieve+0x8e>
			*(rc+i) = SPI1->DR;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <spiTransmitRecieve+0xd4>)
 8000388:	68d9      	ldr	r1, [r3, #12]
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	68ba      	ldr	r2, [r7, #8]
 800038e:	4413      	add	r3, r2
 8000390:	b2ca      	uxtb	r2, r1
 8000392:	701a      	strb	r2, [r3, #0]
			for(int i =0; i <rn;i++)
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	3301      	adds	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	79bb      	ldrb	r3, [r7, #6]
 800039c:	697a      	ldr	r2, [r7, #20]
 800039e:	429a      	cmp	r2, r3
 80003a0:	dbe0      	blt.n	8000364 <spiTransmitRecieve+0x78>
			//rc[i]
		}



		GPIOA->ODR |= GPIO_ODR_ODR_4;
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <spiTransmitRecieve+0xd0>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a05      	ldr	r2, [pc, #20]	; (80003bc <spiTransmitRecieve+0xd0>)
 80003a8:	f043 0310 	orr.w	r3, r3, #16
 80003ac:	6153      	str	r3, [r2, #20]

}
 80003ae:	bf00      	nop
 80003b0:	3724      	adds	r7, #36	; 0x24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40020000 	.word	0x40020000
 80003c0:	40013000 	.word	0x40013000

080003c4 <main>:

int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
	// PWR AND SYS ENABLE
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003ca:	4b99      	ldr	r3, [pc, #612]	; (8000630 <main+0x26c>)
 80003cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003ce:	4a98      	ldr	r2, [pc, #608]	; (8000630 <main+0x26c>)
 80003d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003d4:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003d6:	4b96      	ldr	r3, [pc, #600]	; (8000630 <main+0x26c>)
 80003d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003da:	4a95      	ldr	r2, [pc, #596]	; (8000630 <main+0x26c>)
 80003dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e0:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CSR |= PWR_CSR_VOSRDY;
 80003e2:	4b94      	ldr	r3, [pc, #592]	; (8000634 <main+0x270>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	4a93      	ldr	r2, [pc, #588]	; (8000634 <main+0x270>)
 80003e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ec:	6053      	str	r3, [r2, #4]

	SysTick_Config(16000000/1000);
 80003ee:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80003f2:	f7ff ff41 	bl	8000278 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn,0);
 80003f6:	2100      	movs	r1, #0
 80003f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003fc:	f7ff ff12 	bl	8000224 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SysTick_IRQn);
 8000400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000404:	f7ff fef0 	bl	80001e8 <__NVIC_EnableIRQ>

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000408:	4b89      	ldr	r3, [pc, #548]	; (8000630 <main+0x26c>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a88      	ldr	r2, [pc, #544]	; (8000630 <main+0x26c>)
 800040e:	f043 0303 	orr.w	r3, r3, #3
 8000412:	6313      	str	r3, [r2, #48]	; 0x30

    // cs
	GPIOA->MODER &= ~(3 << GPIO_MODER_MODE4_Pos);
 8000414:	4b88      	ldr	r3, [pc, #544]	; (8000638 <main+0x274>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a87      	ldr	r2, [pc, #540]	; (8000638 <main+0x274>)
 800041a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800041e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << GPIO_MODER_MODE4_Pos);
 8000420:	4b85      	ldr	r3, [pc, #532]	; (8000638 <main+0x274>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a84      	ldr	r2, [pc, #528]	; (8000638 <main+0x274>)
 8000426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800042a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4;
 800042c:	4b82      	ldr	r3, [pc, #520]	; (8000638 <main+0x274>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	4a81      	ldr	r2, [pc, #516]	; (8000638 <main+0x274>)
 8000432:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000436:	6093      	str	r3, [r2, #8]

	GPIOA->ODR &= ~GPIO_ODR_ODR_4;
 8000438:	4b7f      	ldr	r3, [pc, #508]	; (8000638 <main+0x274>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a7e      	ldr	r2, [pc, #504]	; (8000638 <main+0x274>)
 800043e:	f023 0310 	bic.w	r3, r3, #16
 8000442:	6153      	str	r3, [r2, #20]

	// SPI1 INIT
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000444:	4b7a      	ldr	r3, [pc, #488]	; (8000630 <main+0x26c>)
 8000446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000448:	4a79      	ldr	r2, [pc, #484]	; (8000630 <main+0x26c>)
 800044a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800044e:	6453      	str	r3, [r2, #68]	; 0x44

	GPIOA->MODER &= ~((3 << GPIO_MODER_MODE5_Pos)|(3 << GPIO_MODER_MODE6_Pos)|(3 << GPIO_MODER_MODE7_Pos));
 8000450:	4b79      	ldr	r3, [pc, #484]	; (8000638 <main+0x274>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a78      	ldr	r2, [pc, #480]	; (8000638 <main+0x274>)
 8000456:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800045a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ((2 << GPIO_MODER_MODE5_Pos)|(2 << GPIO_MODER_MODE6_Pos)|(2 << GPIO_MODER_MODE7_Pos)); // 2 ALTERNATIVE
 800045c:	4b76      	ldr	r3, [pc, #472]	; (8000638 <main+0x274>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a75      	ldr	r2, [pc, #468]	; (8000638 <main+0x274>)
 8000462:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8000466:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR7;
 8000468:	4b73      	ldr	r3, [pc, #460]	; (8000638 <main+0x274>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	4a72      	ldr	r2, [pc, #456]	; (8000638 <main+0x274>)
 800046e:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 8000472:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] |=  (5 << GPIO_AFRL_AFSEL5_Pos) | (5 << GPIO_AFRL_AFSEL6_Pos) | ( 5<< GPIO_AFRL_AFSEL7_Pos);
 8000474:	4b70      	ldr	r3, [pc, #448]	; (8000638 <main+0x274>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	4a6f      	ldr	r2, [pc, #444]	; (8000638 <main+0x274>)
 800047a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800047e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000482:	6213      	str	r3, [r2, #32]

	SPI1->CR1 &= ~(SPI_CR1_BR | SPI_CR1_DFF | SPI_CR1_LSBFIRST);
 8000484:	4b6d      	ldr	r3, [pc, #436]	; (800063c <main+0x278>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a6c      	ldr	r2, [pc, #432]	; (800063c <main+0x278>)
 800048a:	f423 630b 	bic.w	r3, r3, #2224	; 0x8b0
 800048e:	f023 0308 	bic.w	r3, r3, #8
 8000492:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |=  SPI_CR1_SSI| SPI_CR1_SSM;
 8000494:	4b69      	ldr	r3, [pc, #420]	; (800063c <main+0x278>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a68      	ldr	r2, [pc, #416]	; (800063c <main+0x278>)
 800049a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800049e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;
 80004a0:	4b66      	ldr	r3, [pc, #408]	; (800063c <main+0x278>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a65      	ldr	r2, [pc, #404]	; (800063c <main+0x278>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE;
 80004ac:	4b63      	ldr	r3, [pc, #396]	; (800063c <main+0x278>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a62      	ldr	r2, [pc, #392]	; (800063c <main+0x278>)
 80004b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004b6:	6013      	str	r3, [r2, #0]

//	//I2C INIT
	//RCC->CCIPR &= ~(3<< RCC_CCIPR_I2C1SEL);
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80004b8:	4b5d      	ldr	r3, [pc, #372]	; (8000630 <main+0x26c>)
 80004ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004bc:	4a5c      	ldr	r2, [pc, #368]	; (8000630 <main+0x26c>)
 80004be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c2:	6413      	str	r3, [r2, #64]	; 0x40


	GPIOB->MODER &= ~((3 << GPIO_MODER_MODE6_Pos)|(3 << GPIO_MODER_MODE7_Pos));
 80004c4:	4b5e      	ldr	r3, [pc, #376]	; (8000640 <main+0x27c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a5d      	ldr	r2, [pc, #372]	; (8000640 <main+0x27c>)
 80004ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80004ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((2 << GPIO_MODER_MODE6_Pos)|(2 << GPIO_MODER_MODE7_Pos));
 80004d0:	4b5b      	ldr	r3, [pc, #364]	; (8000640 <main+0x27c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a5a      	ldr	r2, [pc, #360]	; (8000640 <main+0x27c>)
 80004d6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80004da:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT6 |GPIO_OTYPER_OT7;
 80004dc:	4b58      	ldr	r3, [pc, #352]	; (8000640 <main+0x27c>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	4a57      	ldr	r2, [pc, #348]	; (8000640 <main+0x27c>)
 80004e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80004e6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR7;
 80004e8:	4b55      	ldr	r3, [pc, #340]	; (8000640 <main+0x27c>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	4a54      	ldr	r2, [pc, #336]	; (8000640 <main+0x27c>)
 80004ee:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80004f2:	6093      	str	r3, [r2, #8]
	GPIOB->AFR[0] |=  (4 << GPIO_AFRL_AFSEL6_Pos) | (4 << GPIO_AFRL_AFSEL7_Pos);
 80004f4:	4b52      	ldr	r3, [pc, #328]	; (8000640 <main+0x27c>)
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	4a51      	ldr	r2, [pc, #324]	; (8000640 <main+0x27c>)
 80004fa:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 80004fe:	6213      	str	r3, [r2, #32]

	I2C1->CR2 |= 16<<I2C_CR2_FREQ_Pos;
 8000500:	4b50      	ldr	r3, [pc, #320]	; (8000644 <main+0x280>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a4f      	ldr	r2, [pc, #316]	; (8000644 <main+0x280>)
 8000506:	f043 0310 	orr.w	r3, r3, #16
 800050a:	6053      	str	r3, [r2, #4]
	I2C1->CCR |= 0x50;
 800050c:	4b4d      	ldr	r3, [pc, #308]	; (8000644 <main+0x280>)
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	4a4c      	ldr	r2, [pc, #304]	; (8000644 <main+0x280>)
 8000512:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000516:	61d3      	str	r3, [r2, #28]
	I2C1->TRISE |= 0x11;
 8000518:	4b4a      	ldr	r3, [pc, #296]	; (8000644 <main+0x280>)
 800051a:	6a1b      	ldr	r3, [r3, #32]
 800051c:	4a49      	ldr	r2, [pc, #292]	; (8000644 <main+0x280>)
 800051e:	f043 0311 	orr.w	r3, r3, #17
 8000522:	6213      	str	r3, [r2, #32]
	I2C1->CR1 |= I2C_CR1_PE;
 8000524:	4b47      	ldr	r3, [pc, #284]	; (8000644 <main+0x280>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a46      	ldr	r2, [pc, #280]	; (8000644 <main+0x280>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6013      	str	r3, [r2, #0]
//	GPIOB->MODER &=  ~(3<< GPIO_MODER_MODE2_Pos);
//	GPIOB->MODER |= 1 << GPIO_MODER_MODE2_Pos;
//
//	GPIOB->ODR |= GPIO_ODR_OD2;

	uint8_t data[2] = {0x20,0x0F};
 8000530:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 8000534:	833b      	strh	r3, [r7, #24]
	uint8_t dataRecieve[12] = {0};
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
	data[0] = 0x7E | (1<<7);
 8000544:	23fe      	movs	r3, #254	; 0xfe
 8000546:	763b      	strb	r3, [r7, #24]
	spiTransmitRecieve(data, dataRecieve, 1, 1);  // change to spi mode
 8000548:	f107 010c 	add.w	r1, r7, #12
 800054c:	f107 0018 	add.w	r0, r7, #24
 8000550:	2301      	movs	r3, #1
 8000552:	2201      	movs	r2, #1
 8000554:	f7ff feca 	bl	80002ec <spiTransmitRecieve>
	 data[0] = 0x7E; data[1] = 0x11;
 8000558:	237e      	movs	r3, #126	; 0x7e
 800055a:	763b      	strb	r3, [r7, #24]
 800055c:	2311      	movs	r3, #17
 800055e:	767b      	strb	r3, [r7, #25]
	  spiTransmitRecieve(data, 0, 2, 0);
 8000560:	f107 0018 	add.w	r0, r7, #24
 8000564:	2300      	movs	r3, #0
 8000566:	2202      	movs	r2, #2
 8000568:	2100      	movs	r1, #0
 800056a:	f7ff febf 	bl	80002ec <spiTransmitRecieve>
	  delayMs(5);
 800056e:	2005      	movs	r0, #5
 8000570:	f7ff fea4 	bl	80002bc <delayMs>
	  data[0] = 0x03| (1<<7);
 8000574:	2383      	movs	r3, #131	; 0x83
 8000576:	763b      	strb	r3, [r7, #24]
	  spiTransmitRecieve(data, dataRecieve, 1, 1);
 8000578:	f107 010c 	add.w	r1, r7, #12
 800057c:	f107 0018 	add.w	r0, r7, #24
 8000580:	2301      	movs	r3, #1
 8000582:	2201      	movs	r2, #1
 8000584:	f7ff feb2 	bl	80002ec <spiTransmitRecieve>
	  data[0] = 0x7E; data[1] = 0x15;
 8000588:	237e      	movs	r3, #126	; 0x7e
 800058a:	763b      	strb	r3, [r7, #24]
 800058c:	2315      	movs	r3, #21
 800058e:	767b      	strb	r3, [r7, #25]
	  spiTransmitRecieve(data, 0, 2, 0);
 8000590:	f107 0018 	add.w	r0, r7, #24
 8000594:	2300      	movs	r3, #0
 8000596:	2202      	movs	r2, #2
 8000598:	2100      	movs	r1, #0
 800059a:	f7ff fea7 	bl	80002ec <spiTransmitRecieve>
	  delayMs(80);
 800059e:	2050      	movs	r0, #80	; 0x50
 80005a0:	f7ff fe8c 	bl	80002bc <delayMs>
	  data[0] = 0x03| (1<<7);
 80005a4:	2383      	movs	r3, #131	; 0x83
 80005a6:	763b      	strb	r3, [r7, #24]
	  spiTransmitRecieve(data, dataRecieve, 1, 1);
 80005a8:	f107 010c 	add.w	r1, r7, #12
 80005ac:	f107 0018 	add.w	r0, r7, #24
 80005b0:	2301      	movs	r3, #1
 80005b2:	2201      	movs	r2, #1
 80005b4:	f7ff fe9a 	bl	80002ec <spiTransmitRecieve>
	  data[0] = 0x43; data[1] = 0x03;
 80005b8:	2343      	movs	r3, #67	; 0x43
 80005ba:	763b      	strb	r3, [r7, #24]
 80005bc:	2303      	movs	r3, #3
 80005be:	767b      	strb	r3, [r7, #25]
	  spiTransmitRecieve(data, 0, 2, 0);
 80005c0:	f107 0018 	add.w	r0, r7, #24
 80005c4:	2300      	movs	r3, #0
 80005c6:	2202      	movs	r2, #2
 80005c8:	2100      	movs	r1, #0
 80005ca:	f7ff fe8f 	bl	80002ec <spiTransmitRecieve>
	  data[0] = 0x41; data[1] = 0x03;
 80005ce:	2341      	movs	r3, #65	; 0x41
 80005d0:	763b      	strb	r3, [r7, #24]
 80005d2:	2303      	movs	r3, #3
 80005d4:	767b      	strb	r3, [r7, #25]
	  spiTransmitRecieve(data, 0, 2, 0);
 80005d6:	f107 0018 	add.w	r0, r7, #24
 80005da:	2300      	movs	r3, #0
 80005dc:	2202      	movs	r2, #2
 80005de:	2100      	movs	r1, #0
 80005e0:	f7ff fe84 	bl	80002ec <spiTransmitRecieve>
	  data[0] = 0x00 | (1<<7);
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	763b      	strb	r3, [r7, #24]
	  spiTransmitRecieve(data, dataRecieve, 1, 1);
 80005e8:	f107 010c 	add.w	r1, r7, #12
 80005ec:	f107 0018 	add.w	r0, r7, #24
 80005f0:	2301      	movs	r3, #1
 80005f2:	2201      	movs	r2, #1
 80005f4:	f7ff fe7a 	bl	80002ec <spiTransmitRecieve>
	  data[0] = 0x0C | (1<<7);
 80005f8:	238c      	movs	r3, #140	; 0x8c
 80005fa:	763b      	strb	r3, [r7, #24]
	  spiTransmitRecieve(data, dataRecieve, 1, 12);
 80005fc:	f107 010c 	add.w	r1, r7, #12
 8000600:	f107 0018 	add.w	r0, r7, #24
 8000604:	230c      	movs	r3, #12
 8000606:	2201      	movs	r2, #1
 8000608:	f7ff fe70 	bl	80002ec <spiTransmitRecieve>



  while (1)
  {
	  delayMs(1000);
 800060c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000610:	f7ff fe54 	bl	80002bc <delayMs>
	  //GPIOB->ODR ^= GPIO_ODR_OD2;
	 // spiTransmitRecieve(data2, dataRec, 1, 8);
	  for(int i =0; i< 8; i+=2)
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
 8000618:	e006      	b.n	8000628 <main+0x264>
	  {
		  delayMs(1000);
 800061a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061e:	f7ff fe4d 	bl	80002bc <delayMs>
	  for(int i =0; i< 8; i+=2)
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	3302      	adds	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	2b07      	cmp	r3, #7
 800062c:	ddf5      	ble.n	800061a <main+0x256>
	  delayMs(1000);
 800062e:	e7ed      	b.n	800060c <main+0x248>
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000
 8000638:	40020000 	.word	0x40020000
 800063c:	40013000 	.word	0x40013000
 8000640:	40020400 	.word	0x40020400
 8000644:	40005400 	.word	0x40005400

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
uint32_t systemTimeCounter = 0;

void SysTick_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	systemTimeCounter++;
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <SysTick_Handler+0x18>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <SysTick_Handler+0x18>)
 800069c:	6013      	str	r3, [r2, #0]

}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	2000001c 	.word	0x2000001c

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 f811 	bl	8000700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fe71 	bl	80003c4 <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006f0:	08000768 	.word	0x08000768
  ldr r2, =_sbss
 80006f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006f8:	20000020 	.word	0x20000020

080006fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <__libc_init_array>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	4d0d      	ldr	r5, [pc, #52]	; (8000738 <__libc_init_array+0x38>)
 8000704:	4c0d      	ldr	r4, [pc, #52]	; (800073c <__libc_init_array+0x3c>)
 8000706:	1b64      	subs	r4, r4, r5
 8000708:	10a4      	asrs	r4, r4, #2
 800070a:	2600      	movs	r6, #0
 800070c:	42a6      	cmp	r6, r4
 800070e:	d109      	bne.n	8000724 <__libc_init_array+0x24>
 8000710:	4d0b      	ldr	r5, [pc, #44]	; (8000740 <__libc_init_array+0x40>)
 8000712:	4c0c      	ldr	r4, [pc, #48]	; (8000744 <__libc_init_array+0x44>)
 8000714:	f000 f818 	bl	8000748 <_init>
 8000718:	1b64      	subs	r4, r4, r5
 800071a:	10a4      	asrs	r4, r4, #2
 800071c:	2600      	movs	r6, #0
 800071e:	42a6      	cmp	r6, r4
 8000720:	d105      	bne.n	800072e <__libc_init_array+0x2e>
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f855 3b04 	ldr.w	r3, [r5], #4
 8000728:	4798      	blx	r3
 800072a:	3601      	adds	r6, #1
 800072c:	e7ee      	b.n	800070c <__libc_init_array+0xc>
 800072e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000732:	4798      	blx	r3
 8000734:	3601      	adds	r6, #1
 8000736:	e7f2      	b.n	800071e <__libc_init_array+0x1e>
 8000738:	08000760 	.word	0x08000760
 800073c:	08000760 	.word	0x08000760
 8000740:	08000760 	.word	0x08000760
 8000744:	08000764 	.word	0x08000764

08000748 <_init>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr

08000754 <_fini>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	bf00      	nop
 8000758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075a:	bc08      	pop	{r3}
 800075c:	469e      	mov	lr, r3
 800075e:	4770      	bx	lr
